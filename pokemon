<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
  <title>Pocket Stadium — Kanto 3v3</title>

  <!-- Tailwind Play CDN (great for a quick, single-file app) -->
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          fontFamily: { ui: ['ui-sans-serif', 'system-ui', 'Segoe UI', 'Roboto', 'Helvetica', 'Apple Color Emoji'] },
          boxShadow: { soft: '0 6px 30px rgba(0,0,0,.08)' }
        }
      }
    }
  </script>

  <style>
    /* Make those sprites look crisp on mobile/retina */
    .pixel {
      image-rendering: pixelated;
      image-rendering: crisp-edges;
    }
    /* Smooth HP bar animation */
    .hpbar-inner { transition: width .35s ease; }
    /* Glassy card look */
    .card {
      @apply bg-white/80 backdrop-blur rounded-2xl shadow-soft border border-slate-200;
    }
    .btn {
      @apply inline-flex items-center justify-center rounded-xl px-4 py-2 font-medium text-white active:opacity-90;
      background: linear-gradient(180deg, #22c55e, #16a34a);
    }
    .btn-secondary {
      @apply inline-flex items-center justify-center rounded-xl px-4 py-2 font-medium;
      background: linear-gradient(180deg, #e5e7eb, #d1d5db);
      color:#111827;
    }
    .btn-warn {
      background: linear-gradient(180deg, #f59e0b, #d97706);
    }
    .btn-danger {
      background: linear-gradient(180deg, #ef4444, #dc2626);
    }
    .btn-ghost {
      @apply rounded-xl px-3 py-2 font-medium text-slate-700;
      background: transparent;
    }
    .chip {
      @apply inline-flex items-center gap-1 rounded-full px-3 py-1 text-xs font-semibold bg-slate-100 text-slate-700;
    }
    .grid-auto-fit {
      display:grid;
      grid-template-columns: repeat(auto-fit, minmax(84px, 1fr));
      gap:.75rem;
    }
    .tap {
      -webkit-tap-highlight-color: transparent;
      touch-action: manipulation;
    }
  </style>
</head>
<body class="min-h-screen bg-gradient-to-b from-sky-50 via-emerald-50 to-white font-ui text-slate-800">
  <header class="sticky top-0 z-10 bg-white/80 backdrop-blur border-b border-slate-200">
    <div class="max-w-5xl mx-auto px-4 py-3 flex items-center gap-3">
      <img alt="Pokeball" src="https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/items/poke-ball.png" class="w-6 h-6 pixel"/>
      <h1 class="text-lg font-bold">Pocket Stadium — Kanto 3v3</h1>
      <span class="ml-auto text-xs text-slate-500">Mobile-first demo</span>
    </div>
  </header>

  <main class="max-w-5xl mx-auto px-4 py-4 space-y-6">
    <!-- Step 1: Team Builder -->
    <section id="builder" class="space-y-4">
      <div class="flex items-center justify-between">
        <h2 class="text-xl font-bold">Build your teams</h2>
        <div class="flex gap-2">
          <button id="btnRandomize" class="btn-secondary tap">Randomize teams</button>
          <button id="btnClear" class="btn-ghost tap">Clear</button>
        </div>
      </div>

      <div class="grid md:grid-cols-2 gap-4">
        <!-- Team A (You) -->
        <div class="card p-4">
          <div class="flex items-center gap-2 mb-3">
            <span class="chip">You</span>
            <div class="text-sm text-slate-500">Choose 3</div>
            <div class="ml-auto">
              <button id="pickA" class="btn tap">Pick</button>
            </div>
          </div>
          <div id="teamA" class="grid grid-cols-3 gap-3"></div>
        </div>

        <!-- Team B (Rival) -->
        <div class="card p-4">
          <div class="flex items-center gap-2 mb-3">
            <span class="chip">Rival</span>
            <div class="text-sm text-slate-500">Choose 3</div>
            <div class="ml-auto">
              <button id="pickB" class="btn tap">Pick</button>
            </div>
          </div>
          <div id="teamB" class="grid grid-cols-3 gap-3"></div>
        </div>
      </div>

      <div class="flex items-center gap-3 pt-2">
        <button id="startBattle" class="btn btn-warn tap disabled:opacity-50" disabled>Start Battle</button>
        <div id="buildHint" class="text-sm text-slate-500">Pick 3 for each side to begin.</div>
      </div>
    </section>

    <!-- Step 2: Battle Arena -->
    <section id="arena" class="hidden space-y-4">
      <div class="flex items-center gap-3">
        <h2 class="text-xl font-bold">Battle</h2>
        <span id="roundTag" class="chip">Round 1</span>
        <div class="ml-auto flex items-center gap-3">
          <label class="flex items-center gap-2 text-sm">
            <input id="autoPlay" type="checkbox" class="accent-emerald-600">
            Auto play
          </label>
          <button id="reset" class="btn-secondary tap">Back to builder</button>
        </div>
      </div>

      <!-- Rosters -->
      <div class="grid md:grid-cols-2 gap-4">
        <div class="card p-3">
          <div class="flex items-center gap-2 mb-2">
            <span class="chip">You</span>
            <div class="text-xs text-slate-500">Roster</div>
          </div>
          <div id="rosterA" class="flex gap-2"></div>
        </div>
        <div class="card p-3">
          <div class="flex items-center gap-2 mb-2">
            <span class="chip">Rival</span>
            <div class="text-xs text-slate-500">Roster</div>
          </div>
          <div id="rosterB" class="flex gap-2"></div>
        </div>
      </div>

      <!-- Versus Stage -->
      <div class="card p-4">
        <div class="grid grid-cols-2 gap-2 items-center">
          <!-- Opponent -->
          <div class="flex flex-col items-center">
            <div class="text-sm font-semibold mb-1" id="nameB">???</div>
            <img id="spriteB" class="w-36 h-36 pixel" alt="Opponent sprite"/>
            <div class="w-full max-w-xs mt-2">
              <div class="text-xs mb-1">HP <span id="hpTextB"></span></div>
              <div class="h-3 w-full bg-slate-200 rounded-full overflow-hidden">
                <div id="hpBarB" class="hpbar-inner h-full bg-gradient-to-r from-emerald-500 to-green-600" style="width:100%"></div>
              </div>
            </div>
          </div>

          <!-- You -->
          <div class="flex flex-col items-center">
            <div class="text-sm font-semibold mb-1" id="nameA">???</div>
            <img id="spriteA" class="w-36 h-36 pixel" alt="Your sprite"/>
            <div class="w-full max-w-xs mt-2">
              <div class="text-xs mb-1">HP <span id="hpTextA"></span></div>
              <div class="h-3 w-full bg-slate-200 rounded-full overflow-hidden">
                <div id="hpBarA" class="hpbar-inner h-full bg-gradient-to-r from-emerald-500 to-green-600" style="width:100%"></div>
              </div>
            </div>
          </div>
        </div>

        <!-- Controls -->
        <div class="mt-4 flex flex-wrap items-center gap-2">
          <button id="btnStrike" class="btn tap disabled:opacity-50" disabled>Strike (Physical)</button>
          <button id="btnBlast" class="btn tap disabled:opacity-50" disabled>Blast (Special)</button>
          <button id="btnNext" class="btn-secondary tap disabled:opacity-50" disabled>Next</button>
        </div>
      </div>

      <!-- Log -->
      <div class="card p-3">
        <div class="flex items-center gap-2 mb-2">
          <span class="chip">Battle log</span>
          <button id="clearLog" class="ml-auto btn-ghost text-sm tap">Clear</button>
        </div>
        <ol id="log" class="space-y-2 text-sm max-h-80 overflow-auto pr-1"></ol>
      </div>
    </section>
  </main>

  <!-- Picker Overlay -->
  <div id="picker" class="fixed inset-0 z-20 hidden">
    <div class="absolute inset-0 bg-black/40" data-close></div>
    <div class="absolute inset-x-0 bottom-0 max-h-[85vh] rounded-t-3xl bg-white p-4 space-y-3">
      <div class="flex items-center gap-2">
        <div id="pickerLabel" class="chip">Pick — You</div>
        <input id="search" type="text" placeholder="Search Pokémon…" class="ml-auto w-full max-w-xs px-3 py-2 rounded-xl border border-slate-300 focus:outline-none focus:ring-2 focus:ring-emerald-400" />
        <button id="donePick" class="btn-secondary tap">Done</button>
      </div>
      <div id="pickedCount" class="text-xs text-slate-500">0 / 3 selected</div>
      <div id="grid" class="grid-auto-fit"></div>
    </div>
  </div>

  <footer class="max-w-5xl mx-auto px-4 py-8 text-center text-xs text-slate-500">
    Data & sprites from <a class="underline" href="https://pokeapi.co/" target="_blank" rel="noreferrer">PokéAPI</a>.
  </footer>

  <script>
    // -----------------------------
    // Utilities
    // -----------------------------
    const $ = sel => document.querySelector(sel);
    const $$ = sel => Array.from(document.querySelectorAll(sel));
    const sleep = ms => new Promise(r => setTimeout(r, ms));

    // Random helpers
    const rand = (min, max) => Math.random() * (max - min) + min;
    const sample = arr => arr[Math.floor(Math.random() * arr.length)];

    // Sprite URL for selection grid (fast, no per-pokemon fetches)
    const gridSpriteURL = id => `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`;

    // -----------------------------
    // App State
    // -----------------------------
    const state = {
      allPokemon: [], // {id, name}
      teamA: [], // [{id,name}]
      teamB: [],
      pickingFor: 'A',
      tempPick: new Set(), // temporary picks inside overlay
      // Battle
      rosterA: [], // full detail & computed stats for team A
      rosterB: [],
      aIdx: 0,
      bIdx: 0,
      round: 1,
      waitingForPlayerChoice: false,
      queuedPlayerMove: null, // 'physical' | 'special'
      autoPlay: false,
      lock: false, // prevent spamming buttons while resolving turn
    };

    // -----------------------------
    // Boot
    // -----------------------------
    document.addEventListener('DOMContentLoaded', async () => {
      renderTeams();
      wireBuilder();
      wireArena();
      await loadKanto();
    });

    async function loadKanto() {
      try {
        const res = await fetch('https://pokeapi.co/api/v2/pokemon?limit=151');
        const data = await res.json();
        state.allPokemon = data.results.map((p, i) => ({ id: i + 1, name: capitalize(p.name) }));
        // Pre-render picker grid once
        renderGrid();
      } catch (e) {
        toast('Could not load Kanto list. Check your connection or try again.');
        console.error(e);
      }
    }

    function capitalize(s) { return s.charAt(0).toUpperCase() + s.slice(1); }

    // -----------------------------
    // Builder UI
    // -----------------------------
    function wireBuilder() {
      $('#pickA').addEventListener('click', () => openPicker('A'));
      $('#pickB').addEventListener('click', () => openPicker('B'));
      $('#btnClear').addEventListener('click', () => {
        state.teamA = []; state.teamB = [];
        renderTeams(); updateStartButton();
      });
      $('#btnRandomize').addEventListener('click', () => {
        const ids = Array.from({length:151}, (_,i)=>i+1);
        shuffle(ids);
        state.teamA = ids.slice(0,3).map(id => ({ id, name: nameFor(id) }));
        state.teamB = ids.slice(3,6).map(id => ({ id, name: nameFor(id) }));
        renderTeams(); updateStartButton();
      });
      $('#startBattle').addEventListener('click', startBattle);
    }

    function nameFor(id) {
      const p = state.allPokemon.find(x => x.id === id);
      return p ? p.name : `#${id}`;
    }

    function shuffle(a) {
      for (let i = a.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [a[i], a[j]] = [a[j], a[i]];
      }
      return a;
    }

    function renderTeams() {
      const slot = (p, removeCb) => `
        <div class="card p-2 flex flex-col items-center">
          <img src="${gridSpriteURL(p.id)}" alt="${p.name}" class="w-16 h-16 pixel" />
          <div class="text-xs mt-1 text-center">${p.name}</div>
          <button class="mt-2 btn-ghost text-xs tap" data-remove>Remove</button>
        </div>`;

      const filler = `
        <div class="rounded-2xl border border-dashed border-slate-300 h-24 flex items-center justify-center text-slate-400 text-xs">
          Empty
        </div>`;

      // Team A
      const A = $('#teamA');
      A.innerHTML = '';
      [...state.teamA].forEach((p, idx) => {
        const wrap = document.createElement('div');
        wrap.innerHTML = slot(p);
        wrap.querySelector('[data-remove]').addEventListener('click', () => {
          state.teamA.splice(idx,1); renderTeams(); updateStartButton();
        });
        A.appendChild(wrap.firstElementChild);
      });
      for (let i = state.teamA.length; i < 3; i++) {
        const d = document.createElement('div'); d.innerHTML = filler; A.appendChild(d.firstElementChild);
      }

      // Team B
      const B = $('#teamB');
      B.innerHTML = '';
      [...state.teamB].forEach((p, idx) => {
        const wrap = document.createElement('div');
        wrap.innerHTML = slot(p);
        wrap.querySelector('[data-remove]').addEventListener('click', () => {
          state.teamB.splice(idx,1); renderTeams(); updateStartButton();
        });
        B.appendChild(wrap.firstElementChild);
      });
      for (let i = state.teamB.length; i < 3; i++) {
        const d = document.createElement('div'); d.innerHTML = filler; B.appendChild(d.firstElementChild);
      }

      updateStartButton();
    }

    function updateStartButton() {
      const ok = state.teamA.length === 3 && state.teamB.length === 3;
      $('#startBattle').disabled = !ok;
      $('#buildHint').textContent = ok ? 'Ready!' : 'Pick 3 for each side to begin.';
    }

    // -----------------------------
    // Picker Overlay
    // -----------------------------
    function openPicker(team) {
      state.pickingFor = team;
      state.tempPick = new Set((team === 'A' ? state.teamA : state.teamB).map(p => p.id));
      $('#pickerLabel').textContent = `Pick — ${team === 'A' ? 'You' : 'Rival'}`;
      $('#pickedCount').textContent = `${state.tempPick.size} / 3 selected`;
      $('#picker').classList.remove('hidden');
      $('#search').value = '';
      filterGrid('');
    }

    function closePicker(commit = false) {
      if (commit) {
        const list = Array.from(state.tempPick).slice(0,3).map(id => ({ id, name: nameFor(id) }));
        if (state.pickingFor === 'A') state.teamA = list; else state.teamB = list;
        renderTeams(); updateStartButton();
      }
      $('#picker').classList.add('hidden');
    }

    $('#donePick').addEventListener('click', () => closePicker(true));
    $('#picker').addEventListener('click', (e) => {
      if (e.target.hasAttribute('data-close')) closePicker(false);
    });

    $('#search').addEventListener('input', (e) => filterGrid(e.target.value.trim().toLowerCase()));

    function renderGrid() {
      const grid = $('#grid');
      grid.innerHTML = '';
      state.allPokemon.forEach(p => {
        const card = document.createElement('button');
        card.className = 'tap rounded-2xl border border-slate-200 p-2 flex flex-col items-center hover:border-emerald-400 focus:outline-none';
        card.setAttribute('data-id', p.id);
        card.innerHTML = `
          <img src="${gridSpriteURL(p.id)}" alt="${p.name}" class="w-14 h-14 pixel" />
          <div class="text-xs mt-1">${p.name}</div>
        `;
        card.addEventListener('click', () => toggleTempPick(p.id, card));
        grid.appendChild(card);
      });
    }

    function filterGrid(q) {
      $$('#grid [data-id]').forEach(el => {
        const id = Number(el.getAttribute('data-id'));
        const name = nameFor(id).toLowerCase();
        const match = !q || name.includes(q) || String(id).padStart(3,'0').includes(q);
        el.classList.toggle('hidden', !match);
        reflectPickedUI(id, el);
      });
    }

    function toggleTempPick(id, el) {
      if (state.tempPick.has(id)) {
        state.tempPick.delete(id);
      } else {
        if (state.tempPick.size >= 3) return; // cap at 3
        state.tempPick.add(id);
      }
      $('#pickedCount').textContent = `${state.tempPick.size} / 3 selected`;
      reflectPickedUI(id, el);
    }

    function reflectPickedUI(id, el) {
      const picked = state.tempPick.has(id);
      el.style.borderColor = picked ? '#10b981' : '#e5e7eb';
      el.style.boxShadow = picked ? '0 0 0 3px rgba(16,185,129,.2)' : 'none';
    }

    // -----------------------------
    // Arena / Battle
    // -----------------------------
    function wireArena() {
      $('#reset').addEventListener('click', () => {
        $('#arena').classList.add('hidden');
        $('#builder').classList.remove('hidden');
        clearLog();
      });
      $('#btnStrike').addEventListener('click', async () => { if (state.waitingForPlayerChoice) { state.queuedPlayerMove = 'physical'; await resolveTurn(); } });
      $('#btnBlast').addEventListener('click', async () => { if (state.waitingForPlayerChoice) { state.queuedPlayerMove = 'special'; await resolveTurn(); } });
      $('#btnNext').addEventListener('click', async () => { if (!state.waitingForPlayerChoice && !state.lock) await resolveTurn(true); });
      $('#clearLog').addEventListener('click', clearLog);
      $('#autoPlay').addEventListener('change', (e) => { state.autoPlay = e.target.checked; if (state.autoPlay) autoLoop(); });
    }

    async function startBattle() {
      $('#builder').classList.add('hidden');
      $('#arena').classList.remove('hidden');
      clearLog();

      // Reset battle state
      state.rosterA = [];
      state.rosterB = [];
      state.aIdx = 0; state.bIdx = 0;
      state.round = 1;
      state.autoPlay = $('#autoPlay').checked;
      state.waitingForPlayerChoice = true;
      state.queuedPlayerMove = null;
      disableControls(true);

      // Load details for the 6 Pokémon
      const all6 = [...state.teamA, ...state.teamB];
      const details = await Promise.all(all6.map(p => fetchDetail(p.id)));
      state.rosterA = details.slice(0,3);
      state.rosterB = details.slice(3,6);

      // Init active
      updateRosterBadges();
      setActiveDisplays();

      // First choice
      state.waitingForPlayerChoice = true;
      disableControls(false);
      log(`Battle Start! ${currA().name} vs ${currB().name}.`);
      if (state.autoPlay) autoLoop();
    }

    async function fetchDetail(id) {
      const res = await fetch(`https://pokeapi.co/api/v2/pokemon/${id}`);
      const p = await res.json();
      const getStat = (key) => p.stats.find(s => s.stat.name === key).base_stat;
      // Derived stats at L50
      const L = 50;
      const base = {
        hp: getStat('hp'),
        atk: getStat('attack'),
        def: getStat('defense'),
        spa: getStat('special-attack'),
        spd: getStat('special-defense'),
        spe: getStat('speed'),
      };
      const derived = {
        maxHP: Math.floor(((2 * base.hp) * L) / 100) + L + 10,
        atk: Math.floor(((2 * base.atk) * L) / 100) + 5,
        def: Math.floor(((2 * base.def) * L) / 100) + 5,
        spa: Math.floor(((2 * base.spa) * L) / 100) + 5,
        spd: Math.floor(((2 * base.spd) * L) / 100) + 5,
        spe: Math.floor(((2 * base.spe) * L) / 100) + 5,
      };
      return {
        id,
        name: capitalize(p.name),
        front: p.sprites.front_default || gridSpriteURL(id),
        back: p.sprites.back_default || p.sprites.front_default || gridSpriteURL(id),
        base, stats: { ...derived },
        hp: derived.maxHP,
      };
    }

    // Helpers to get current active mons
    const currA = () => state.rosterA[state.aIdx];
    const currB = () => state.rosterB[state.bIdx];

    function updateRosterBadges() {
      // small circles: alive/fainted
      const mk = (mon, isActive) => {
        const alive = mon.hp > 0;
        const ring = isActive ? 'ring-2 ring-emerald-400' : '';
        return `<div title="${mon.name}" class="w-9 h-9 rounded-full border ${ring} border-slate-300 overflow-hidden ${alive?'':'grayscale opacity-50'}">
          <img class="w-full h-full pixel" src="${gridSpriteURL(mon.id)}" alt="${mon.name}">
        </div>`;
      };
      $('#rosterA').innerHTML = state.rosterA.map((m,i)=>mk(m, i===state.aIdx)).join('');
      $('#rosterB').innerHTML = state.rosterB.map((m,i)=>mk(m, i===state.bIdx)).join('');
    }

    function setActiveDisplays() {
      const A = currA(), B = currB();
      $('#nameA').textContent = A.name;
      $('#nameB').textContent = B.name;
      $('#spriteA').src = A.back;
      $('#spriteB').src = B.front;
      setHPBars();
      $('#roundTag').textContent = `Round ${state.round}`;
      updateRosterBadges();
    }

    function setHPBars() {
      const A = currA(), B = currB();
      const pctA = Math.max(0, Math.round((A.hp / A.stats.maxHP) * 100));
      const pctB = Math.max(0, Math.round((B.hp / B.stats.maxHP) * 100));
      $('#hpBarA').style.width = pctA + '%';
      $('#hpBarB').style.width = pctB + '%';
      $('#hpTextA').textContent = `${A.hp} / ${A.stats.maxHP}`;
      $('#hpTextB').textContent = `${B.hp} / ${B.stats.maxHP}`;
      colorHP('#hpBarA', pctA);
      colorHP('#hpBarB', pctB);
    }

    function colorHP(sel, pct) {
      const el = $(sel);
      if (pct > 50) { el.style.background = 'linear-gradient(90deg,#22c55e,#16a34a)'; }
      else if (pct > 20) { el.style.background = 'linear-gradient(90deg,#f59e0b,#d97706)'; }
      else { el.style.background = 'linear-gradient(90deg,#ef4444,#dc2626)'; }
    }

    function disableControls(disabled) {
      $('#btnStrike').disabled = disabled || !state.waitingForPlayerChoice;
      $('#btnBlast').disabled = disabled || !state.waitingForPlayerChoice;
      $('#btnNext').disabled = disabled || state.waitingForPlayerChoice;
    }

    async function autoLoop() {
      // Run until battle ends or auto toggled off
      while (state.autoPlay && battleAlive()) {
        if (state.waitingForPlayerChoice) {
          // Auto-pick: use the better attacking stat
          const A = currA();
          state.queuedPlayerMove = (A.stats.atk >= A.stats.spa) ? 'physical' : 'special';
        }
        await resolveTurn();
        await sleep(550);
      }
    }

    function battleAlive() {
      const aliveA = state.rosterA.some(m => m.hp > 0);
      const aliveB = state.rosterB.some(m => m.hp > 0);
      return aliveA && aliveB;
    }

    async function resolveTurn(nextBtn = false) {
      if (state.lock) return;
      state.lock = true;

      // If waiting for player choice, we need a move selected
      if (state.waitingForPlayerChoice && !state.queuedPlayerMove) {
        toast('Choose a move.');
        state.lock = false;
        return;
      }

      const A = currA(), B = currB();
      const playerMove = state.queuedPlayerMove || (nextBtn ? 'physical' : 'physical'); // default
      const cpuMove = Math.random() < 0.5 ? 'physical' : 'special';

      // Determine order
      let order = [{ side: 'A', move: playerMove }, { side: 'B', move: cpuMove }];
      if (B.stats.spe > A.stats.spe || (B.stats.spe === A.stats.spe && Math.random() < 0.5)) {
        order.reverse();
      }

      disableControls(true);
      state.waitingForPlayerChoice = false;

      for (const step of order) {
        if (!battleAlive()) break;
        const atk = step.side === 'A' ? currA() : currB();
        const def = step.side === 'A' ? currB() : currA();
        if (atk.hp <= 0 || def.hp <= 0) continue;

        const dmg = computeDamage(atk, def, step.move);
        def.hp = Math.max(0, def.hp - dmg);
        log(`${atk.name} used ${step.move === 'physical' ? 'Strike' : 'Blast'} — ${dmg} dmg!`);
        setHPBars();
        await sleep(350);

        if (def.hp <= 0) {
          log(`${def.name} fainted!`);
          await sleep(350);
          if (step.side === 'A') {
            // B fainted
            const next = state.rosterB.findIndex((m, i) => i > state.bIdx && m.hp > 0);
            if (next !== -1) { state.bIdx = next; }
          } else {
            // A fainted
            const next = state.rosterA.findIndex((m, i) => i > state.aIdx && m.hp > 0);
            if (next !== -1) { state.aIdx = next; }
          }
          if (!battleAlive()) break;
          state.round++;
          setActiveDisplays();
          await sleep(250);
        }
      }

      // Check victory
      if (!battleAlive()) {
        const winner = state.rosterA.some(m=>m.hp>0) ? 'You win!' : 'Rival wins!';
        log(`🏆 ${winner}`);
        state.lock = false;
        return;
      }

      // Next round
      state.round++;
      setActiveDisplays();

      // Ready for player's next choice
      state.queuedPlayerMove = null;
      state.waitingForPlayerChoice = true;
      disableControls(false);

      state.lock = false;

      if (state.autoPlay) autoLoop();
    }

    function computeDamage(attacker, defender, moveType) {
      const level = 50;
      const power = 50;
      const A = moveType === 'physical' ? attacker.stats.atk : attacker.stats.spa;
      const D = moveType === 'physical' ? defender.stats.def : defender.stats.spd;

      let dmg = (((2 * level / 5 + 2) * power * (A / Math.max(1, D))) / 50) + 2;
      // Random factor + crit chance
      dmg *= rand(0.85, 1.0);
      if (Math.random() < 0.1) { dmg *= 1.75; log('It\'s a critical hit!'); }
      return Math.max(1, Math.floor(dmg));
    }

    // -----------------------------
    // Log & Toast
    // -----------------------------
    function log(text) {
      const li = document.createElement('li');
      li.textContent = text;
      $('#log').appendChild(li);
      $('#log').scrollTop = $('#log').scrollHeight;
    }
    function clearLog() { $('#log').innerHTML=''; }

    let toastTimer;
    function toast(msg) {
      clearTimeout(toastTimer);
      let t = $('#toast');
      if (!t) {
        t = document.createElement('div');
        t.id = 'toast';
        t.className = 'fixed bottom-3 inset-x-0 mx-auto w-fit max-w-[90%] px-4 py-2 rounded-xl bg-slate-900 text-white text-sm shadow-lg';
        document.body.appendChild(t);
      }
      t.textContent = msg;
      t.style.opacity = '1';
      toastTimer = setTimeout(()=> t.style.opacity='0', 1600);
    }
  </script>
</body>
</html>